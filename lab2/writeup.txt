My reasoning for deciding on a linked list data structure is that this data structure will allow the user to constantly change their record collection list. I created three classes for this program. The first class is called Lab2 as this class will create an instance of RecordCollection and call each public methods inside the class. The next class I created was the RecordCollection. This class has eight methods inside of it with two variable. The incrementingCopies and decrementingCopies method will accept string arguments and iterate through the list to either add or remove copies from the list. The return type for theses two methods are integers as the owner wants to know how many copies of each record she currently owns. The collectionNames method will accept zero arguments and will iterate through the list and print out each record in her collection sorted by the year. This method will return null as it will only print out the name of each record she currently has in her collection. The recordMatchingByArtist method will accept a string argument and iterate through a list. The return type for this method is a string as the user wants to know what artist or band she has in her collection that are related to the record she has searched. The recordMatchingByYear method will accept an integer argument called year. This method will iterate through a list and print out record names that were released during that year. The return type for this method is an integer as it will return how many records she has in the collection that were printed out during that year. The addToCollection method will accept a string argument and add new information to her record collection list. The return type is null as she doesn't want to know how many records she has added to her collection. The RecordCollection method is a constructer method that will create a new list and return null. The variable head is a node that will point to the head of the list. The modifyList variable is a node that will iterate through the list and be used to make changes to the original list. The final class created is RecordCollectionNode. This class contains a private string variable called recordName that will store record names in each node. Another variable this class contains is a private node variable called next. This variable will allow the user to iterate through the list. Getter and setter methods in the RecordCollectionNode class will prevent other classes from modifying the variables in this class.
